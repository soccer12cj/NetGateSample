//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace NetGateSample.Iats.NetGate.Reporting {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ReportLinkV3Soap", Namespace="https://www.iatspayments.com/NetGate/")]
    public partial class ReportLinkV3 : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetCreditCardBankReconciliationReportCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditCardApprovedSpecificDateCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditCardApprovedSpecificDateXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditCardApprovedDateRangeCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditCardRejectDateRangeCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditCardRejectSpecificDateCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCreditCardRejectSpecificDateXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTBankReconciliationReportCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTApprovedSpecificDateCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTApprovedSpecificDateXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTApprovedDateRangeCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTRejectDateRangeCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTReturnDateRangeCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTRejectSpecificDateCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTRejectSpecificDateXMLOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTReturnSpecificDateCSVOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetACHEFTReturnSpecificDateXMLOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ReportLinkV3() {
            this.Url = global::NetGateSample.Properties.Settings.Default.NetGateSample_Iats_NetGate_Reporting_ReportLinkV3;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetCreditCardBankReconciliationReportCSVCompletedEventHandler GetCreditCardBankReconciliationReportCSVCompleted;
        
        /// <remarks/>
        public event GetCreditCardApprovedSpecificDateCSVCompletedEventHandler GetCreditCardApprovedSpecificDateCSVCompleted;
        
        /// <remarks/>
        public event GetCreditCardApprovedSpecificDateXMLCompletedEventHandler GetCreditCardApprovedSpecificDateXMLCompleted;
        
        /// <remarks/>
        public event GetCreditCardApprovedDateRangeCSVCompletedEventHandler GetCreditCardApprovedDateRangeCSVCompleted;
        
        /// <remarks/>
        public event GetCreditCardRejectDateRangeCSVCompletedEventHandler GetCreditCardRejectDateRangeCSVCompleted;
        
        /// <remarks/>
        public event GetCreditCardRejectSpecificDateCSVCompletedEventHandler GetCreditCardRejectSpecificDateCSVCompleted;
        
        /// <remarks/>
        public event GetCreditCardRejectSpecificDateXMLCompletedEventHandler GetCreditCardRejectSpecificDateXMLCompleted;
        
        /// <remarks/>
        public event GetACHEFTBankReconciliationReportCSVCompletedEventHandler GetACHEFTBankReconciliationReportCSVCompleted;
        
        /// <remarks/>
        public event GetACHEFTApprovedSpecificDateCSVCompletedEventHandler GetACHEFTApprovedSpecificDateCSVCompleted;
        
        /// <remarks/>
        public event GetACHEFTApprovedSpecificDateXMLCompletedEventHandler GetACHEFTApprovedSpecificDateXMLCompleted;
        
        /// <remarks/>
        public event GetACHEFTApprovedDateRangeCSVCompletedEventHandler GetACHEFTApprovedDateRangeCSVCompleted;
        
        /// <remarks/>
        public event GetACHEFTRejectDateRangeCSVCompletedEventHandler GetACHEFTRejectDateRangeCSVCompleted;
        
        /// <remarks/>
        public event GetACHEFTReturnDateRangeCSVCompletedEventHandler GetACHEFTReturnDateRangeCSVCompleted;
        
        /// <remarks/>
        public event GetACHEFTRejectSpecificDateCSVCompletedEventHandler GetACHEFTRejectSpecificDateCSVCompleted;
        
        /// <remarks/>
        public event GetACHEFTRejectSpecificDateXMLCompletedEventHandler GetACHEFTRejectSpecificDateXMLCompleted;
        
        /// <remarks/>
        public event GetACHEFTReturnSpecificDateCSVCompletedEventHandler GetACHEFTReturnSpecificDateCSVCompleted;
        
        /// <remarks/>
        public event GetACHEFTReturnSpecificDateXMLCompletedEventHandler GetACHEFTReturnSpecificDateXMLCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetCreditCardBankReconciliationReportCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCreditCardBankReconciliationReportCSV(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string currency, bool summaryOnly, string customerIPAddress) {
            object[] results = this.Invoke("GetCreditCardBankReconciliationReportCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        currency,
                        summaryOnly,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditCardBankReconciliationReportCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string currency, bool summaryOnly, string customerIPAddress) {
            this.GetCreditCardBankReconciliationReportCSVAsync(agentCode, password, fromDate, toDate, currency, summaryOnly, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetCreditCardBankReconciliationReportCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string currency, bool summaryOnly, string customerIPAddress, object userState) {
            if ((this.GetCreditCardBankReconciliationReportCSVOperationCompleted == null)) {
                this.GetCreditCardBankReconciliationReportCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditCardBankReconciliationReportCSVOperationCompleted);
            }
            this.InvokeAsync("GetCreditCardBankReconciliationReportCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        currency,
                        summaryOnly,
                        customerIPAddress}, this.GetCreditCardBankReconciliationReportCSVOperationCompleted, userState);
        }
        
        private void OnGetCreditCardBankReconciliationReportCSVOperationCompleted(object arg) {
            if ((this.GetCreditCardBankReconciliationReportCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditCardBankReconciliationReportCSVCompleted(this, new GetCreditCardBankReconciliationReportCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetCreditCardApprovedSpecificDateCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCreditCardApprovedSpecificDateCSV(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetCreditCardApprovedSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditCardApprovedSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetCreditCardApprovedSpecificDateCSVAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetCreditCardApprovedSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetCreditCardApprovedSpecificDateCSVOperationCompleted == null)) {
                this.GetCreditCardApprovedSpecificDateCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditCardApprovedSpecificDateCSVOperationCompleted);
            }
            this.InvokeAsync("GetCreditCardApprovedSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetCreditCardApprovedSpecificDateCSVOperationCompleted, userState);
        }
        
        private void OnGetCreditCardApprovedSpecificDateCSVOperationCompleted(object arg) {
            if ((this.GetCreditCardApprovedSpecificDateCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditCardApprovedSpecificDateCSVCompleted(this, new GetCreditCardApprovedSpecificDateCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetCreditCardApprovedSpecificDateXML", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCreditCardApprovedSpecificDateXML(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetCreditCardApprovedSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditCardApprovedSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetCreditCardApprovedSpecificDateXMLAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetCreditCardApprovedSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetCreditCardApprovedSpecificDateXMLOperationCompleted == null)) {
                this.GetCreditCardApprovedSpecificDateXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditCardApprovedSpecificDateXMLOperationCompleted);
            }
            this.InvokeAsync("GetCreditCardApprovedSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetCreditCardApprovedSpecificDateXMLOperationCompleted, userState);
        }
        
        private void OnGetCreditCardApprovedSpecificDateXMLOperationCompleted(object arg) {
            if ((this.GetCreditCardApprovedSpecificDateXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditCardApprovedSpecificDateXMLCompleted(this, new GetCreditCardApprovedSpecificDateXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetCreditCardApprovedDateRangeCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCreditCardApprovedDateRangeCSV(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex) {
            object[] results = this.Invoke("GetCreditCardApprovedDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress,
                        startIndex,
                        endIndex});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditCardApprovedDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex) {
            this.GetCreditCardApprovedDateRangeCSVAsync(agentCode, password, fromDate, toDate, customerIPAddress, startIndex, endIndex, null);
        }
        
        /// <remarks/>
        public void GetCreditCardApprovedDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex, object userState) {
            if ((this.GetCreditCardApprovedDateRangeCSVOperationCompleted == null)) {
                this.GetCreditCardApprovedDateRangeCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditCardApprovedDateRangeCSVOperationCompleted);
            }
            this.InvokeAsync("GetCreditCardApprovedDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress,
                        startIndex,
                        endIndex}, this.GetCreditCardApprovedDateRangeCSVOperationCompleted, userState);
        }
        
        private void OnGetCreditCardApprovedDateRangeCSVOperationCompleted(object arg) {
            if ((this.GetCreditCardApprovedDateRangeCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditCardApprovedDateRangeCSVCompleted(this, new GetCreditCardApprovedDateRangeCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetCreditCardRejectDateRangeCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCreditCardRejectDateRangeCSV(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex) {
            object[] results = this.Invoke("GetCreditCardRejectDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress,
                        startIndex,
                        endIndex});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditCardRejectDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex) {
            this.GetCreditCardRejectDateRangeCSVAsync(agentCode, password, fromDate, toDate, customerIPAddress, startIndex, endIndex, null);
        }
        
        /// <remarks/>
        public void GetCreditCardRejectDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex, object userState) {
            if ((this.GetCreditCardRejectDateRangeCSVOperationCompleted == null)) {
                this.GetCreditCardRejectDateRangeCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditCardRejectDateRangeCSVOperationCompleted);
            }
            this.InvokeAsync("GetCreditCardRejectDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress,
                        startIndex,
                        endIndex}, this.GetCreditCardRejectDateRangeCSVOperationCompleted, userState);
        }
        
        private void OnGetCreditCardRejectDateRangeCSVOperationCompleted(object arg) {
            if ((this.GetCreditCardRejectDateRangeCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditCardRejectDateRangeCSVCompleted(this, new GetCreditCardRejectDateRangeCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetCreditCardRejectSpecificDateCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCreditCardRejectSpecificDateCSV(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetCreditCardRejectSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditCardRejectSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetCreditCardRejectSpecificDateCSVAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetCreditCardRejectSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetCreditCardRejectSpecificDateCSVOperationCompleted == null)) {
                this.GetCreditCardRejectSpecificDateCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditCardRejectSpecificDateCSVOperationCompleted);
            }
            this.InvokeAsync("GetCreditCardRejectSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetCreditCardRejectSpecificDateCSVOperationCompleted, userState);
        }
        
        private void OnGetCreditCardRejectSpecificDateCSVOperationCompleted(object arg) {
            if ((this.GetCreditCardRejectSpecificDateCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditCardRejectSpecificDateCSVCompleted(this, new GetCreditCardRejectSpecificDateCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetCreditCardRejectSpecificDateXML", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetCreditCardRejectSpecificDateXML(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetCreditCardRejectSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetCreditCardRejectSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetCreditCardRejectSpecificDateXMLAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetCreditCardRejectSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetCreditCardRejectSpecificDateXMLOperationCompleted == null)) {
                this.GetCreditCardRejectSpecificDateXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCreditCardRejectSpecificDateXMLOperationCompleted);
            }
            this.InvokeAsync("GetCreditCardRejectSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetCreditCardRejectSpecificDateXMLOperationCompleted, userState);
        }
        
        private void OnGetCreditCardRejectSpecificDateXMLOperationCompleted(object arg) {
            if ((this.GetCreditCardRejectSpecificDateXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCreditCardRejectSpecificDateXMLCompleted(this, new GetCreditCardRejectSpecificDateXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTBankReconciliationReportCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTBankReconciliationReportCSV(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string currency, bool summaryOnly, string customerIPAddress) {
            object[] results = this.Invoke("GetACHEFTBankReconciliationReportCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        currency,
                        summaryOnly,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTBankReconciliationReportCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string currency, bool summaryOnly, string customerIPAddress) {
            this.GetACHEFTBankReconciliationReportCSVAsync(agentCode, password, fromDate, toDate, currency, summaryOnly, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetACHEFTBankReconciliationReportCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string currency, bool summaryOnly, string customerIPAddress, object userState) {
            if ((this.GetACHEFTBankReconciliationReportCSVOperationCompleted == null)) {
                this.GetACHEFTBankReconciliationReportCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTBankReconciliationReportCSVOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTBankReconciliationReportCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        currency,
                        summaryOnly,
                        customerIPAddress}, this.GetACHEFTBankReconciliationReportCSVOperationCompleted, userState);
        }
        
        private void OnGetACHEFTBankReconciliationReportCSVOperationCompleted(object arg) {
            if ((this.GetACHEFTBankReconciliationReportCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTBankReconciliationReportCSVCompleted(this, new GetACHEFTBankReconciliationReportCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTApprovedSpecificDateCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTApprovedSpecificDateCSV(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetACHEFTApprovedSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTApprovedSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetACHEFTApprovedSpecificDateCSVAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetACHEFTApprovedSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetACHEFTApprovedSpecificDateCSVOperationCompleted == null)) {
                this.GetACHEFTApprovedSpecificDateCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTApprovedSpecificDateCSVOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTApprovedSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetACHEFTApprovedSpecificDateCSVOperationCompleted, userState);
        }
        
        private void OnGetACHEFTApprovedSpecificDateCSVOperationCompleted(object arg) {
            if ((this.GetACHEFTApprovedSpecificDateCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTApprovedSpecificDateCSVCompleted(this, new GetACHEFTApprovedSpecificDateCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTApprovedSpecificDateXML", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTApprovedSpecificDateXML(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetACHEFTApprovedSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTApprovedSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetACHEFTApprovedSpecificDateXMLAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetACHEFTApprovedSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetACHEFTApprovedSpecificDateXMLOperationCompleted == null)) {
                this.GetACHEFTApprovedSpecificDateXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTApprovedSpecificDateXMLOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTApprovedSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetACHEFTApprovedSpecificDateXMLOperationCompleted, userState);
        }
        
        private void OnGetACHEFTApprovedSpecificDateXMLOperationCompleted(object arg) {
            if ((this.GetACHEFTApprovedSpecificDateXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTApprovedSpecificDateXMLCompleted(this, new GetACHEFTApprovedSpecificDateXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTApprovedDateRangeCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTApprovedDateRangeCSV(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex) {
            object[] results = this.Invoke("GetACHEFTApprovedDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress,
                        startIndex,
                        endIndex});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTApprovedDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex) {
            this.GetACHEFTApprovedDateRangeCSVAsync(agentCode, password, fromDate, toDate, customerIPAddress, startIndex, endIndex, null);
        }
        
        /// <remarks/>
        public void GetACHEFTApprovedDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex, object userState) {
            if ((this.GetACHEFTApprovedDateRangeCSVOperationCompleted == null)) {
                this.GetACHEFTApprovedDateRangeCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTApprovedDateRangeCSVOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTApprovedDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress,
                        startIndex,
                        endIndex}, this.GetACHEFTApprovedDateRangeCSVOperationCompleted, userState);
        }
        
        private void OnGetACHEFTApprovedDateRangeCSVOperationCompleted(object arg) {
            if ((this.GetACHEFTApprovedDateRangeCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTApprovedDateRangeCSVCompleted(this, new GetACHEFTApprovedDateRangeCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTRejectDateRangeCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTRejectDateRangeCSV(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex) {
            object[] results = this.Invoke("GetACHEFTRejectDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress,
                        startIndex,
                        endIndex});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTRejectDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex) {
            this.GetACHEFTRejectDateRangeCSVAsync(agentCode, password, fromDate, toDate, customerIPAddress, startIndex, endIndex, null);
        }
        
        /// <remarks/>
        public void GetACHEFTRejectDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, int startIndex, int endIndex, object userState) {
            if ((this.GetACHEFTRejectDateRangeCSVOperationCompleted == null)) {
                this.GetACHEFTRejectDateRangeCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTRejectDateRangeCSVOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTRejectDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress,
                        startIndex,
                        endIndex}, this.GetACHEFTRejectDateRangeCSVOperationCompleted, userState);
        }
        
        private void OnGetACHEFTRejectDateRangeCSVOperationCompleted(object arg) {
            if ((this.GetACHEFTRejectDateRangeCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTRejectDateRangeCSVCompleted(this, new GetACHEFTRejectDateRangeCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTReturnDateRangeCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTReturnDateRangeCSV(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress) {
            object[] results = this.Invoke("GetACHEFTReturnDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTReturnDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress) {
            this.GetACHEFTReturnDateRangeCSVAsync(agentCode, password, fromDate, toDate, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetACHEFTReturnDateRangeCSVAsync(string agentCode, string password, System.DateTime fromDate, System.DateTime toDate, string customerIPAddress, object userState) {
            if ((this.GetACHEFTReturnDateRangeCSVOperationCompleted == null)) {
                this.GetACHEFTReturnDateRangeCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTReturnDateRangeCSVOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTReturnDateRangeCSV", new object[] {
                        agentCode,
                        password,
                        fromDate,
                        toDate,
                        customerIPAddress}, this.GetACHEFTReturnDateRangeCSVOperationCompleted, userState);
        }
        
        private void OnGetACHEFTReturnDateRangeCSVOperationCompleted(object arg) {
            if ((this.GetACHEFTReturnDateRangeCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTReturnDateRangeCSVCompleted(this, new GetACHEFTReturnDateRangeCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTRejectSpecificDateCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTRejectSpecificDateCSV(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetACHEFTRejectSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTRejectSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetACHEFTRejectSpecificDateCSVAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetACHEFTRejectSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetACHEFTRejectSpecificDateCSVOperationCompleted == null)) {
                this.GetACHEFTRejectSpecificDateCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTRejectSpecificDateCSVOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTRejectSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetACHEFTRejectSpecificDateCSVOperationCompleted, userState);
        }
        
        private void OnGetACHEFTRejectSpecificDateCSVOperationCompleted(object arg) {
            if ((this.GetACHEFTRejectSpecificDateCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTRejectSpecificDateCSVCompleted(this, new GetACHEFTRejectSpecificDateCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTRejectSpecificDateXML", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTRejectSpecificDateXML(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetACHEFTRejectSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTRejectSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetACHEFTRejectSpecificDateXMLAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetACHEFTRejectSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetACHEFTRejectSpecificDateXMLOperationCompleted == null)) {
                this.GetACHEFTRejectSpecificDateXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTRejectSpecificDateXMLOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTRejectSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetACHEFTRejectSpecificDateXMLOperationCompleted, userState);
        }
        
        private void OnGetACHEFTRejectSpecificDateXMLOperationCompleted(object arg) {
            if ((this.GetACHEFTRejectSpecificDateXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTRejectSpecificDateXMLCompleted(this, new GetACHEFTRejectSpecificDateXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTReturnSpecificDateCSV", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTReturnSpecificDateCSV(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetACHEFTReturnSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTReturnSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetACHEFTReturnSpecificDateCSVAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetACHEFTReturnSpecificDateCSVAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetACHEFTReturnSpecificDateCSVOperationCompleted == null)) {
                this.GetACHEFTReturnSpecificDateCSVOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTReturnSpecificDateCSVOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTReturnSpecificDateCSV", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetACHEFTReturnSpecificDateCSVOperationCompleted, userState);
        }
        
        private void OnGetACHEFTReturnSpecificDateCSVOperationCompleted(object arg) {
            if ((this.GetACHEFTReturnSpecificDateCSVCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTReturnSpecificDateCSVCompleted(this, new GetACHEFTReturnSpecificDateCSVCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("https://www.iatspayments.com/NetGate/GetACHEFTReturnSpecificDateXML", RequestNamespace="https://www.iatspayments.com/NetGate/", ResponseNamespace="https://www.iatspayments.com/NetGate/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetACHEFTReturnSpecificDateXML(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            object[] results = this.Invoke("GetACHEFTReturnSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void GetACHEFTReturnSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress) {
            this.GetACHEFTReturnSpecificDateXMLAsync(agentCode, password, date, customerIPAddress, null);
        }
        
        /// <remarks/>
        public void GetACHEFTReturnSpecificDateXMLAsync(string agentCode, string password, System.DateTime date, string customerIPAddress, object userState) {
            if ((this.GetACHEFTReturnSpecificDateXMLOperationCompleted == null)) {
                this.GetACHEFTReturnSpecificDateXMLOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetACHEFTReturnSpecificDateXMLOperationCompleted);
            }
            this.InvokeAsync("GetACHEFTReturnSpecificDateXML", new object[] {
                        agentCode,
                        password,
                        date,
                        customerIPAddress}, this.GetACHEFTReturnSpecificDateXMLOperationCompleted, userState);
        }
        
        private void OnGetACHEFTReturnSpecificDateXMLOperationCompleted(object arg) {
            if ((this.GetACHEFTReturnSpecificDateXMLCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetACHEFTReturnSpecificDateXMLCompleted(this, new GetACHEFTReturnSpecificDateXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCreditCardBankReconciliationReportCSVCompletedEventHandler(object sender, GetCreditCardBankReconciliationReportCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditCardBankReconciliationReportCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditCardBankReconciliationReportCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCreditCardApprovedSpecificDateCSVCompletedEventHandler(object sender, GetCreditCardApprovedSpecificDateCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditCardApprovedSpecificDateCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditCardApprovedSpecificDateCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCreditCardApprovedSpecificDateXMLCompletedEventHandler(object sender, GetCreditCardApprovedSpecificDateXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditCardApprovedSpecificDateXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditCardApprovedSpecificDateXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCreditCardApprovedDateRangeCSVCompletedEventHandler(object sender, GetCreditCardApprovedDateRangeCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditCardApprovedDateRangeCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditCardApprovedDateRangeCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCreditCardRejectDateRangeCSVCompletedEventHandler(object sender, GetCreditCardRejectDateRangeCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditCardRejectDateRangeCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditCardRejectDateRangeCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCreditCardRejectSpecificDateCSVCompletedEventHandler(object sender, GetCreditCardRejectSpecificDateCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditCardRejectSpecificDateCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditCardRejectSpecificDateCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetCreditCardRejectSpecificDateXMLCompletedEventHandler(object sender, GetCreditCardRejectSpecificDateXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCreditCardRejectSpecificDateXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCreditCardRejectSpecificDateXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTBankReconciliationReportCSVCompletedEventHandler(object sender, GetACHEFTBankReconciliationReportCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTBankReconciliationReportCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTBankReconciliationReportCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTApprovedSpecificDateCSVCompletedEventHandler(object sender, GetACHEFTApprovedSpecificDateCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTApprovedSpecificDateCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTApprovedSpecificDateCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTApprovedSpecificDateXMLCompletedEventHandler(object sender, GetACHEFTApprovedSpecificDateXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTApprovedSpecificDateXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTApprovedSpecificDateXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTApprovedDateRangeCSVCompletedEventHandler(object sender, GetACHEFTApprovedDateRangeCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTApprovedDateRangeCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTApprovedDateRangeCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTRejectDateRangeCSVCompletedEventHandler(object sender, GetACHEFTRejectDateRangeCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTRejectDateRangeCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTRejectDateRangeCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTReturnDateRangeCSVCompletedEventHandler(object sender, GetACHEFTReturnDateRangeCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTReturnDateRangeCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTReturnDateRangeCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTRejectSpecificDateCSVCompletedEventHandler(object sender, GetACHEFTRejectSpecificDateCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTRejectSpecificDateCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTRejectSpecificDateCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTRejectSpecificDateXMLCompletedEventHandler(object sender, GetACHEFTRejectSpecificDateXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTRejectSpecificDateXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTRejectSpecificDateXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTReturnSpecificDateCSVCompletedEventHandler(object sender, GetACHEFTReturnSpecificDateCSVCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTReturnSpecificDateCSVCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTReturnSpecificDateCSVCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void GetACHEFTReturnSpecificDateXMLCompletedEventHandler(object sender, GetACHEFTReturnSpecificDateXMLCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetACHEFTReturnSpecificDateXMLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetACHEFTReturnSpecificDateXMLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591